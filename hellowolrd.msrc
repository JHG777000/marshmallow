///
Copyright (c) 2017-2018 Jacob Gordon. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

module mymod.

 u64 myvar := 0xff.

 u64 myvar0.

 external function puts(u8* string).

///************************************************************
*  Block comments, in marshmallow are done with three forward *
*  slashes.                                                   *
*                                                             *
************************************************************///

 typedef int myint.

 typedef u32 int.

 typedef u64 int64.

 enum ( enum1 := 5223, enum2, enum3 := 42, enum4, enum5 := 0 ) myenum.

 myenum var := enum1.

 myenum var2 := enum2.

 myenum var3 := enum3.

 myint myvar1 := 07.

 i32 myvar3 := ((-0107)+9).

 function main() returns i32.

  myenum var4 := enum2.

  u64 myvar := 0xff.

  u64 i := 0.

  u64 j := 4.

  f64 x := (0.23).

  myvar3 := (-07).

  var3 := enum3.

  var4 := enum4.

  u64* ptr := null.

  j := ( j + (i + (2 / 2)) ). //marshmallow forces grouping to avoid order of operations ambiguity

  j := ($u64(myvar3)).

  j := 4.

  //because all new languages need to support unicode identifiers
  u64 ðŸ˜€ := 'ðŸ˜€'.

  u32[3][3] myarray := {{7,7,7},{7,7,7},{7,7,7}}.

  u32[3][3] myarray2.

  myarray2 := myarray.
  
  section helloworld.

  if ( ptr == null ).

   puts("This is null!").

  end if.

  ptr := (&j).

  i := (*ptr).

  if ( i == j ).

   puts("i is j!").

  end if.

  switch (j+enum5).

   case ( (1+(1.0)) - 1 ).

    puts("Hi,").

   case (2.4).

     puts("Bye.").

   case (4).

     puts("Not.").

   end case.

   case (3).

    puts("In marshmallow yðŸ˜€u can have string literals that
          exist on more than one line,
          and they will be printed as such!!!!!").

   end case.

   default.

   end default.

  end switch.

  j--.

  i := 0.

  puts("Hello.").

  myvar := '\''.

 // assignments return a value
 // using ":=" as assignment, helps aviod confusion with "=="
 // you can however use assignment in a conditional
 // also due to functions' unified scope a variable can be used before its defined

  if (myvar2 := myvar) while ( i < 2 ).

   u64 myvar2 := 52.

   myvar := (2+2).

   if (0).

    puts("World!!!!").

   else.

    puts("\"\"\"\'\"'").

   end if.

   i++.

  end while.

  if (j) goto helloworld.

  return 0.

 end function.

end module.