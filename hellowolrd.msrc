module mymod.

 u64 myvar := 0xff.

 u64 myvar0.

 external function puts(u8* string).

///************************************************************
*  Block comments, in marshmallow are done with three forward *
*  slashes.                                                   *
*                                                             *
************************************************************///

 typedef int myint.

 typedef u32 int.

 enum ( enum1 := 5223, enum2, enum3 := 42, enum4 ) myenum.

 myenum var := enum1.

 myenum var2 := enum2.

 myenum var3 := enum3.

 myint myvar1 := 07.

 function main() returns i32.

  myenum var4 := enum2.

  u64 myvar := 0xff.

  u64 i := 0.

  u64 j := 4.

  var3 := enum3.

  var4 := enum4.

  j := ( j + (i + (2 / 2)) ). //marshmallow forces grouping to avoid order of operations ambiguity

  j := 4.

  //because all new languages need to support unicode identifiers
  u64 ðŸ˜€ := 'ðŸ˜€'.

  u32[3][3] myarray := {{7,7,7},{7,7,7},{7,7,7}}.

  u32[3][3] myarray2.

  myarray2 := myarray.
  
  section helloworld.

  switch (j).

   case (1).

    puts("Hi,").

   case (2).

     puts("Bye.").

   case (4).

     puts("Not.").

   end case.

   case (3).

    puts("In marshmallow yðŸ˜€u can have string literals that
          exist on more than one line,
          and they will be printed as such!!!!!").

   end case.

   default.

   end default.

  end switch.

  j--.

  i := 0.

  puts("Hello.").

  myvar := '\''.

 // assignments return a value
 // using ":=" as assignment, helps aviod confusion with "=="
 // you can however use assignment in a conditional
 // also due to functions' unified scope a variable can be used before its defined

  if (myvar2 := myvar) while ( i < 2 ).

   u64 myvar2 := 52.

   myvar := (2+2).

   if (0).

    puts("World!!!!").

   else.

    puts("\"\"\"\'\"'").

   end if.

   i++.

  end while.

  if (j) goto helloworld.

  return 0.

 end function.

end module.